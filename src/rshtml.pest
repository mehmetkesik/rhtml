// region --- Utility & Lexical Rules ---

WHITESPACE = _{ " " | "\t" | NEWLINE }
rust_identifier = @{ (ASCII_ALPHA | "_") ~ (ASCII_ALPHANUMERIC | "_")* }

// endregion

// region --- Core Template Rules ---

BOM = _{ "\u{FEFF}" }
template = { SOI ~ BOM? ~ extends_directive? ~ WHITESPACE* ~ template_content* ~ EOI }
template_content = _{ (comment_block | block | text) }
inner_template = { (comment_block | block | inner_text)* }

// endregion

// region --- Text and Comment Rules ---

text = @{ ( "@@}" | "@@{" | "@@" |  (!("@") ~ ANY) )+ }
inner_text = @{ ( "@@}" | "@@{" | "@@" | (!("@" | "}") ~ ANY) )+ }

comment_block = { "@*" ~ comment_content ~ "*@" }
comment_content = @{ ( ("*" ~ !("@")) | (!("*") ~ ANY) )* }

// endregion

// region --- Block Types ---

block = !{
    "@" ~ (
        (render_directive | include_directive | section_directive | section_block | render_body_directive | child_content_directive | component)
        | (rust_block | rust_expr | rust_expr_parenthesized | match_expr | rust_expr_simple)
    )
}

// endregion

// region --- Rust Expression Blocks (@if, @for, etc.) ---

rust_expr = {
    (rust_expr_head ~  WHITESPACE* ~ "{" ~ inner_template ~ "}")+
}

rust_expr_head = @{
    (("if" | ("else" ~ WHITESPACE+ ~ "if") | "for" | "while") ~ WHITESPACE+ ~ (!("{" | "@" | "}") ~ ANY)+)
  | ("else")
}

// endregion

// region --- Simple Rust Expressions (@identifier...) ---

rust_expr_simple = @{
    !(WHITESPACE*
    ~ ("{"|"if"|"for"|"while"|"else"|"match"|"include"|"extends"|"render"|"section"|"render_body")
    ~ WHITESPACE+
    )
    ~ rust_identifier ~ (&(!expression_boundary) ~ chain_segment)*
}


chain_segment = {
    ("." | "?.") ~ rust_identifier
  | "::" ~ rust_identifier
  | ("?"? ~ "(" ~ nested_content* ~ ")")
  | ("?"? ~ "[" ~ nested_content* ~ "]")
  | ("::" ~ "<" ~ nested_content* ~ ">")
  | "?"
}

nested_content = _{
    ("(" ~ nested_content* ~ ")")
  | ("[" ~ nested_content* ~ "]")
  | ("<" ~ nested_content* ~ ">")
  | ("{" ~ nested_content* ~ "}")
  | (!((")" | "]" | ">" | "}") | expression_boundary) ~ ANY)
}

expression_boundary = _{
    ("<" ~ ("/" | ASCII_ALPHA))
  | "@"
  | "{"
  | NEWLINE
}

//endregion

// region --- Rust Code Blocks (@{ ... }) ---

rust_block = {
    WHITESPACE* ~ "{" ~ rust_block_content* ~ "}"
}

rust_block_content = _{
    text_line_directive |
    text_block_tag |
    nested_block  |
    rust_code
}

nested_block = {
    "{" ~ rust_block_content* ~ "}"
}


rust_code = @{
    (
        _line_comment |
        _block_comment |
        _string_literal |
        !( "@:" | "{" | "}" | "\"" | "r\"" | "r#\"" | text_block_tag ) ~ ANY
    )+
}

escaped_char = _{ "\\" ~ ANY }
_normal_string = _{
      ("\"" ~ (escaped_char | !("\"" | "\\") ~ ANY)* ~ "\"")
    | ("'" ~ (escaped_char | !("'" | "\\") ~ ANY) ~ "'")
 }

_raw_string = _{
    ("r\"" ~ ( !"\"" ~ ANY )* ~ "\"") |
    ("r#\"" ~ ( !"\"#" ~ ANY )* ~ "\"#")
}
_string_literal = _{ _normal_string | _raw_string }

_line_comment = _{ "//" ~ (!NEWLINE ~ ANY)* }
_block_comment = _{ "/*" ~ (_block_comment | !"*/" ~ ANY)* ~ "*/" }

text_line_directive = ${ ("@:" ~ (("@" ~ rust_expr_simple) | text_line)*) }
text_line = @{ ("@@" | !(NEWLINE | ("@" ~ rust_expr_simple)) ~ ANY)+ }


text_block_tag = { "<text>" ~ (("@" ~ (rust_expr_simple)) |  text_block)* ~ "</text>" }
text_block = @{ ("@@" | !("</text>" | ("@" ~ (rust_expr_simple))) ~ ANY)+ }

// endregion

// region --- Parenthesized Rust Expressions (@(expressions)) ---

rust_expr_parenthesized = _{
    "(" ~ rust_expr_paren ~ ")"
}

rust_expr_paren = @{
	(nested_expression | (!(")") ~ ANY))*
}

nested_expression = _{
    ( "(" ~ (nested_expression | (!(")") ~ ANY))* ~ ")" )
  | ( "[" ~ (nested_expression | (!("]") ~ ANY))* ~ "]" )
  | ( "{" ~ (nested_expression | (!("}") ~ ANY))*   ~ "}" )
}

// endregion

// region --- Rust match expression @match ... { ... => ... }

match_expr = {
    match_expr_head ~ WHITESPACE*
    ~ "{" ~ WHITESPACE*
    ~ match_expr_arm*
    ~ WHITESPACE* ~ "}"
}

match_expr_head = @{
    "match" ~ WHITESPACE+ ~ (rust_expr_simple | rust_expr_parenthesized | !("{" | "@" | "}") ~ ANY)+
}

match_expr_arm = {
    match_expr_arm_head ~ WHITESPACE*
    ~ "=>" ~ WHITESPACE*
    ~ (("{" ~ inner_template ~ "}") | rust_expr_simple | (match_inner_text)) ~ WHITESPACE* ~ ","?
}

match_expr_arm_head = @{ (!("@" | "=>") ~ ANY)+ }

match_inner_text = @{ ( "@@}" | "@@{" | "@@" | (!(NEWLINE | "@" | ("," ~ WHITESPACE* ~ "}") | "}") ~ ANY) )+ }

// endregion

/// region Code blocks and code transfers

string_line = @{
    "\"" ~ ( escaped_char | !("\"" | "\\") ~ ANY )* ~ "\"" |
    "'" ~ ( escaped_char | !("'" | "\\") ~ ANY )* ~ "'"
}

// region @include directive @include('other_view.html')

include_directive = {
    &"include"
    ~ "include" ~ WHITESPACE* ~ "(" ~ WHITESPACE*
        ~ string_line
    ~ WHITESPACE* ~ ")"
}

// endregion

// region @extends directive @extends('layout.html')

extends_directive = {
    "@" ~ "extends" ~ WHITESPACE* ~ "(" ~ WHITESPACE*
        ~ string_line
    ~ WHITESPACE* ~ ")"
}

// endregion

// region @section directive and block @section('section_name'), @section content { ... }

section_block = { &(section_head ~ WHITESPACE* ~ "{") ~ section_head ~ WHITESPACE* ~ "{" ~ inner_template ~ "}" }
section_head = @{ "section" ~ WHITESPACE+ ~ rust_identifier }

// one line section
section_directive = {
        &("section" ~ WHITESPACE* ~ "(") ~
        "section" ~ WHITESPACE* ~ "(" ~ WHITESPACE*
        ~ string_line
        ~ ","
        ~ (string_line | (rust_expr_simple))
        ~ WHITESPACE* ~ ")"
}

// endregion

// region @render directive @render('section_name')

render_directive = {
    &"render"
    ~ "render" ~ WHITESPACE* ~ "(" ~ WHITESPACE*
    ~ string_line
    ~ WHITESPACE* ~ ")"
}

// endregion

// region @render_body directive @render_body

render_body_directive = @{
    &"render_body"
    ~ "render_body"
    ~ (&(WHITESPACE+) | ("(" ~ ")"))
}

// endregion

// region @child_content directive @child_content

child_content_directive = @{
    &"child_content"
    ~ "child_content"
    ~ (&(WHITESPACE+) | ("(" ~ ")"))
}

// endregion

// region component usage @component_name(param1:value1, param2:value2){inside}

    component = {
        &(rust_identifier ~ "(")
        ~ rust_identifier ~ WHITESPACE* ~ "(" ~ WHITESPACE*
        ~ (component_parameter ~(WHITESPACE* ~ "," ~ WHITESPACE* ~ component_parameter)*)*
        ~ WHITESPACE* ~ ")" ~ WHITESPACE*
        ~ "{" ~ inner_template ~ "}"
    }

    component_parameter = {
        rust_identifier ~ WHITESPACE*
        ~ ":" ~ WHITESPACE* ~ (
        bool
        | number
        | string
        | ("@" ~ rust_expr_parenthesized)
        | ("@" ~ rust_expr_simple)
        | ("{" ~ inner_template ~ "}")
        )
    }

    bool = @{ "true" | "false" }
    number = @{ ("-")? ~ ASCII_DIGIT+ ~ ("." ~ ASCII_DIGIT+)? }
    string = @{ _normal_string }

// endregion

/// endregion Code blocks and code transfers


// TODO 2: maybe add @let = func() support
// TODO 3: Maybe a block for raw text could be added @raw_text { ... }

// TODO 999: Maybe add @client {...} support for client side codes and templates

// TODO After: (Rust Time)
/*
    1. Adding html escapes during rendering also a directive that can print without escape is required
    2. IsRenderSectionDefined or hasSection like method must be defined
    3. define _layout = "layout.rs.html" support in rust block to set view layout. maybe remove extends directive after this
    4. add class, checked, selected, disabled, readonly, required functions to use in html attributes or json like functions for js
    5. define push/stack functions for asset management

*/