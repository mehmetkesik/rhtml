// region --- Utility & Lexical Rules ---

WHITESPACE = _{ " " | "\t" | NEWLINE }
rust_identifier = @{ (ASCII_ALPHA | "_") ~ (ASCII_ALPHANUMERIC | "_")* }

// endregion

// region --- Core Template Rules ---

BOM = _{ "\u{FEFF}" }
template = { SOI ~ BOM? ~ extends_directive? ~ WHITESPACE* ~ (section_directive | section_block | template_content)* ~ EOI }
template_content = _{ (comment_block | block | text) }
inner_template = { (comment_block | block | inner_text)* }

// endregion

// region --- Text and Comment Rules ---

text = @{ ( "@@}" | "@@{" | "@@" |  (!("@") ~ ANY) )+ }
inner_text = @{ ( "@@}" | "@@{" | "@@" | (!("@" | "}") ~ ANY) )+ }

comment_block = { "@*" ~ comment_content ~ "*@" }
comment_content = @{ ( ("*" ~ !("@")) | (!("*") ~ ANY) )* }

// endregion

// region --- Block Types ---

block = !{
    "@" ~ (
        yield_directive | include_directive
        | (rust_block | rust_expr | rust_expr_parenthesized | rust_expr_simple )
    )
}

// endregion

// region --- Rust Expression Blocks (@if, @for, etc.) ---

rust_expr = {
    (rust_expr_head ~  WHITESPACE* ~ "{" ~ inner_template ~ "}")+
}

rust_expr_head = @{
    (("if" | ("else" ~ WHITESPACE+ ~ "if") | "for" | "while") ~ WHITESPACE+ ~ (!("{" | "@" | "}") ~ ANY)+)
  | ("else")
}

// endregion

// region --- Simple Rust Expressions (@identifier...) ---

rust_expr_simple = @{
    !(WHITESPACE* ~ ("{" | "if" | "for" | "while" | "else" | "include" | "extends" | "yield" | "section" | "end"))
    ~ rust_identifier ~ (&(!expression_boundary) ~ chain_segment)*
}


chain_segment = {
    ("." | "?.") ~ rust_identifier
  | "::" ~ rust_identifier
  | ("?"? ~ "(" ~ nested_content* ~ ")")
  | ("?"? ~ "[" ~ nested_content* ~ "]")
  | ("::" ~ "<" ~ nested_content* ~ ">")
  | "?"
}

nested_content = _{
    ("(" ~ nested_content* ~ ")")
  | ("[" ~ nested_content* ~ "]")
  | ("<" ~ nested_content* ~ ">")
  | ("{" ~ nested_content* ~ "}")
  | (!((")" | "]" | ">" | "}") | expression_boundary) ~ ANY)
}

expression_boundary = _{
    ("<" ~ ("/" | ASCII_ALPHA))
  | "@"
  | "{"
  | NEWLINE
}

//endregion

// region --- Rust Code Blocks (@{ ... }) ---

rust_block = {
    WHITESPACE* ~ "{" ~ rust_block_content* ~ "}"
}

rust_block_content = _{
    text_line_directive |
    text_block_tag |
    nested_block  |
    rust_code
}

nested_block = {
    "{" ~ rust_block_content* ~ "}"
}

// rust_code = @{
//     ( !( "@:" | "{" | "}") ~ ANY )+
// }

// Rust code block with string support, to prevent nested blocks in strings from assuming curly braces
// rust_code = @{
// 	(
//     ( "\"" ~ ( ("\\" ~ ANY) | (!("\"" | "\\") ~ ANY) )* ~ "\"" ) |
//     ( "r\"" ~ ( !"\"" ~ ANY )* ~ "\"" ) |
//     ( "r#\"" ~ ( !"\"#" ~ ANY )* ~ "\"#" ) |
//     !( "@:" | "{" | "}" | "\"" | "r\"" ) ~ ANY
//     )+
// }

// Rust code block with string support, to prevent nested blocks in strings from assuming curly braces
rust_code = @{
    (
        _string_literal |
        !( "@:" | "{" | "}" | "\"" | "r\"" | text_block_tag ) ~ ANY
    )+
}

_normal_string_char = _{ escaped_char | (!("\"" | "\\") ~ ANY) }
escaped_char = _{ "\\" ~ ANY }
_normal_string = _{ "\"" ~ _normal_string_char* ~ "\"" }

_raw_string = _{
    ("r\"" ~ ( !"\"" ~ ANY )* ~ "\"") |
    ("r#\"" ~ ( !"\"#" ~ ANY )* ~ "\"#")
}
_string_literal = _{ _normal_string | _raw_string }


text_line_directive = ${ ("@:" ~ (("@" ~ rust_expr_simple) | text_line)*) }
text_line = @{ ("@@" | !(NEWLINE | ("@" ~ rust_expr_simple)) ~ ANY)+ }


text_block_tag = { "<text>" ~ (("@" ~ (rust_expr_simple)) |  text_block)* ~ "</text>" }
text_block = @{ ("@@" | !("</text>" | ("@" ~ (rust_expr_simple))) ~ ANY)+ }

// endregion

// region --- Parenthesized Rust Expressions (@(expressions)) ---

rust_expr_parenthesized = _{
    "(" ~ rust_expr_paren ~ ")"
}

rust_expr_paren = @{
	(nested_expression | (!(")") ~ ANY))*
}

nested_expression = _{
    ( "(" ~ (nested_expression | (!(")") ~ ANY))* ~ ")" )
  | ( "[" ~ (nested_expression | (!("]") ~ ANY))* ~ "]" )
  | ( "{" ~ (nested_expression | (!("}") ~ ANY))*   ~ "}" )
}

// endregion


/// region Code blocks and code transfers

string_line = @{
    "\"" ~ ( escaped_char | !("\"" | "\\") ~ ANY )* ~ "\"" |
    "'" ~ ( escaped_char | !("'" | "\\") ~ ANY )* ~ "'"
}

// region @include directive @include('other_view.html')

include_directive = {
    &"include"
    ~ "include" ~ WHITESPACE* ~ "(" ~ WHITESPACE*
        ~ string_line
    ~ WHITESPACE* ~ ")"
}

// endregion f

// region @extends directive @extends('layout.html')

extends_directive = {
    &("@" ~ "extends")
    ~ "@" ~ "extends" ~ WHITESPACE* ~ "(" ~ WHITESPACE*
        ~ string_line
    ~ WHITESPACE* ~ ")"
}

// endregion

// region @yield directive @yield('section_name')

yield_directive = {
    &"yield"
    ~ "yield" ~ WHITESPACE* ~ "(" ~ WHITESPACE*
    ~ string_line
    ~ WHITESPACE* ~ ")"
}

// endregion

// region @section directive @section('section_name')

section_block = { section_start ~ template_content* ~ section_end }
section_start = _{
    &("@" ~ "section")
    ~ "@" ~ "section" ~ WHITESPACE* ~ "(" ~ WHITESPACE*
        ~ string_line
        ~ WHITESPACE* ~ ")"
}
section_end = _{ "@" ~ "end" }

// one line section
section_directive = {
    &("@" ~ "section")
    ~ "@" ~ "section" ~ WHITESPACE* ~ "(" ~ WHITESPACE*
        ~ string_line
        ~ ","
        ~ (string_line | (rust_expr_simple))
        ~ WHITESPACE* ~ ")"
}

// endregion

/// endregion Code blocks and code transfers

// TODO 1: make a section in one line @section("name","value")
// TODO 999: Add support for html blocks and extends and layout system, maybe import templates
/*
    @extends('layouts.app')

    @section('title', 'Page Title')

    @section('sidebar')
        <p>This is appended to the master sidebar.</p>
    @end

    @section('content')
        <p>This is my body content.</p>

         <div class="pull-right">
                @include('default-navigation')
         </div>
    @end

    maybe ToJavascript

    maybe
    @client

    @end
*/