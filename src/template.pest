// region --- Utility & Lexical Rules ---

WHITESPACE = _{ " " | "\t" | "\r" | NEWLINE}
rust_identifier = @{ (ASCII_ALPHA | "_") ~ (ASCII_ALPHANUMERIC | "_")* }

// endregion

// region --- Core Template Rules ---

template = { SOI ~ (comment_block | block | text)* ~ EOI }
inner_template = { (comment_block | block | inner_text)* }

// endregion

// region --- Text and Comment Rules ---

text = @{ ( "@@}" | "@@{" | "@@" |  (!("@") ~ ANY) )+ }
inner_text = @{ ( "@@}" | "@@{" | "@@" | (!("@" | "}") ~ ANY) )+ }

comment_block = { "@*" ~ comment_content ~ "*@" }
comment_content = @{ ( ("*" ~ !("@")) | (!("*") ~ ANY) )* }

// endregion

// region --- Block Types ---

block = !{
    "@" ~ (rust_block | rust_expr | rust_expr_simple | rust_expr_parenthesized)
}

// endregion

// region --- Rust Expression Blocks (@if, @for, etc.) ---

rust_expr = {
    (rust_expr_head ~  WHITESPACE* ~ "{" ~ inner_template ~ "}")+
}

rust_expr_head = @{
    (("if" | ("else" ~ WHITESPACE+ ~ "if") | "for" | "while") ~ WHITESPACE+ ~ (!("{" | "@" | "}") ~ ANY)+)
  | ("else")
}

// endregion

// region --- Simple Rust Expressions (@identifier...) ---

rust_expr_simple = @{
    !(WHITESPACE* ~ ("{" | "if" | "for" | "while" | "else")) ~ rust_identifier ~ (&(!expression_boundary) ~ chain_segment)*
}


chain_segment = {
    ("." | "?.") ~ rust_identifier
  | "::" ~ rust_identifier
  | ("?"? ~ "(" ~ nested_content* ~ ")")
  | ("?"? ~ "[" ~ nested_content* ~ "]")
  | ("::" ~ "<" ~ nested_content* ~ ">")
  | "?"
}

nested_content = _{
    ("(" ~ nested_content* ~ ")")
  | ("[" ~ nested_content* ~ "]")
  | ("<" ~ nested_content* ~ ">")
  | ("{" ~ nested_content* ~ "}")
  | (!((")" | "]" | ">" | "}") | expression_boundary) ~ ANY)
}

expression_boundary = _{
    ("<" ~ ("/" | ASCII_ALPHA))
  | "@"
  | "{"
  | NEWLINE
}

//endregion

// region --- Rust Code Blocks (@{ ... }) ---

// rust_block = @{ WHITESPACE* ~ "{" ~ rust_block_content* ~ "}" }
//
// rust_block_content = _{
//     text_line_directive
//     |    ( "{" ~ rust_block_content* ~ "}" )
//     | ( (!"}") ~ ANY )
// }

rust_block = {
    WHITESPACE* ~ "{" ~ rust_block_content* ~ "}"
}

rust_block_content = _{
    text_line_directive |
    nested_block  |
    rust_code
}

nested_block = {
    "{" ~ rust_block_content* ~ "}"
}

rust_code = @{
    ( !( "@:" | "{" | "}") ~ ANY )+
}

text_line_directive = _{
    "@:" ~ text_line
}

text_line = @{
    ( !(NEWLINE) ~ ANY )*
}

// endregion

// region --- Parenthesized Rust Expressions (@(expressions)) ---

rust_expr_parenthesized = _{
    "(" ~ rust_expr_paren ~ ")"
}

rust_expr_paren = @{
	(nested_expression | (!(")") ~ ANY))*
}

nested_expression = _{
    ( "(" ~ (nested_expression | (!(")") ~ ANY))* ~ ")" )
  | ( "[" ~ (nested_expression | (!("]") ~ ANY))* ~ "]" )
  | ( "{" ~ (nested_expression | (!("}") ~ ANY))*   ~ "}" )
}

// endregion


// TODO 2: Add <text>text</text> support for rust blocks for multiline texts
// TODO 3: Add html tags support for rust blocks ex: @{ if true { <div> } }

// TODO 4: Add support for html blocks and extends and layout system, maybe import templates
/*
    @extends('layouts.app')

    @section('title', 'Page Title')

    @section('sidebar')
        <p>This is appended to the master sidebar.</p>
    @end

    @section('content')
        <p>This is my body content.</p>

         <div class="pull-right">
                @include('default-navigation')
         </div>
    @end

    maybe ToJavascript

    maybe
    @client

    @end
*/